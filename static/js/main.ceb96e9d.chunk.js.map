{"version":3,"sources":["Login.js","App.js","reportWebVitals.js","index.js"],"names":["Login","_ref","onLogin","username","setUsername","useState","password","setPassword","_jsxs","className","children","_jsx","type","placeholder","value","onChange","e","target","onClick","handleLogin","dummyProjects","id","name","dummyServerInstances","status","cpuUsage","memoryUsage","dummyFirewallRules","rule","dummyObjectStorage","used","free","hits","ProjectList","projects","onSelectProject","map","project","ProjectDetails","_ref2","ServerInstancesDashboard","_ref3","serverInstances","style","color","border","borderRadius","padding","FirewallDashboard","_ref4","firewallRules","CChart","data","labels","datasets","label","backgroundColor","borderColor","pointBackgroundColor","pointBorderColor","ObjectStorageDashboard","_ref5","objectStorage","App","loggedInUser","setLoggedInUser","selectedProject","setSelectedProject","useEffect","axios","get","then","res","console","log","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ceb96e9d.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport './Login.css' ;\r\n\r\nconst Login = ({ onLogin }) => {\r\n    const [username, setUsername] = useState('');\r\n    const [password, setPassword] = useState('');\r\n  \r\n    const handleLogin = () => {\r\n      // Perform authentication\r\n      // Example: make API call to authenticate user\r\n      const authenticated = true; // Dummy value for demonstration\r\n      if (authenticated) {\r\n        onLogin(username);\r\n      } else {\r\n        alert('Authentication failed');\r\n      }\r\n    };\r\n  \r\n    return (\r\n      <div className=\"login-container\">\r\n        <input type=\"text\" placeholder=\"Username\" value={username} onChange={(e) => setUsername(e.target.value)} />\r\n        <input type=\"password\" placeholder=\"Password\" value={password} onChange={(e) => setPassword(e.target.value)} />\r\n        <button onClick={handleLogin}>Login</button>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  export default Login;","import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport Login from \"./Login\";\nimport { CChart } from \"@coreui/react-chartjs\"; // Dummy data for demonstration\nconst dummyProjects = [\n  { id: 1, name: \"Project 1\" },\n  { id: 2, name: \"Project 2\" },\n];\n\nconst dummyServerInstances = [\n  { id: 1, name: \"Server 1\", status: \"Running\", cpuUsage: 60, memoryUsage: 40 },\n  { id: 2, name: \"Server 2\", status: \"Stopped\", cpuUsage: 0, memoryUsage: 0 },\n];\n\nconst dummyFirewallRules = [\n  { id: 1, rule: \"Allow SSH from specific IP\" },\n  { id: 2, rule: \"Deny ICMP traffic\" },\n];\n\nconst dummyObjectStorage = {\n  used: \"50 GB\",\n  free: \"50 GB\",\n  hits: 1000,\n};\n\n// Login component\n\n// Project list component\nconst ProjectList = ({ projects, onSelectProject }) => {\n  return (\n    <div>\n      <h2>Projects</h2>\n      <ul>\n        {projects.map((project) => (\n          <li key={project.id} onClick={() => onSelectProject(project)}>\n            {project.name}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\n// Project details component\nconst ProjectDetails = ({ project }) => {\n  return (\n    <div>\n      <h2>Project Details - {project.name}</h2>\n      {/* Add links to service dashboards */}\n    </div>\n  );\n};\n\n// Server Instances dashboard component\nconst ServerInstancesDashboard = ({ serverInstances }) => {\n  return (\n    <div>\n      <h2>Server Instances Dashboard</h2>\n      <div\n              style={{\n                color: \"grey\",\n                border: \"1px solid grey\",\n                borderRadius: \"10px\",\n                padding: \"10px\",\n              }}\n            >\n              <h3>Billing</h3>\n              <p>Your billing for this month</p>\n              <h5>$78.9</h5>\n            </div>\n      {/* Display graphs, charts, and controls for server instances */}\n    </div>\n  );\n};\n\n// Firewall dashboard component\nconst FirewallDashboard = ({ firewallRules }) => {\n  return (\n    <div>\n      <h2>Request Per Seconds</h2>\n      <CChart\n                type=\"line\"\n                data={{\n                  labels: [\n                    \"1\",\n                    \"2\",\n                    \"3\",\n                    \"4\",\n                    \"5\",\n                    \"6\",\n                    \"7\",\n                  ],\n                  datasets: [\n                    {\n                      label: \"Request Per Seconds\",\n                      backgroundColor: \"rgba(220, 220, 220, 0.2)\",\n                      borderColor: \"rgba(165, 139, 143, 0.85)\",\n                      pointBackgroundColor: \"rgba(220, 220, 220, 1)\",\n                      pointBorderColor: \"#fff\",\n                      data: [40, 20, 12, 39, 10, 40, 39, 80, 40],\n                    },\n                    \n                  ],\n                }}\n                // options={{\n                //   plugins: {\n                //     legend: {\n                //       labels: {\n                //         color: getStyle('--cui-body-color'),\n                //       }\n                //     }\n                //   },\n                //   scales: {\n                //     x: {\n                //       grid: {\n                //         color: getStyle('--cui-border-color-translucent'),\n                //       },\n                //       ticks: {\n                //         color: getStyle('--cui-body-color'),\n                //       },\n                //     },\n                //     y: {\n                //       grid: {\n                //         color: getStyle('--cui-border-color-translucent'),\n                //       },\n                //       ticks: {\n                //         color: getStyle('--cui-body-color'),\n                //       },\n                //     },\n                //   },\n                // }}\n              />\n      {/* Display number of rules and list of rules */}\n    </div>\n  );\n};\n\n// Object Storage dashboard component\nconst ObjectStorageDashboard = ({ objectStorage }) => {\n  return (\n    <div>\n      <h2>Object Storage Dashboard</h2>\n      {/* Display storage usage, free space, and number of hits */}\n    </div>\n  );\n};\n\n// Main App component\nconst App = () => {\n  const [loggedInUser, setLoggedInUser] = useState(null);\n  const [selectedProject, setSelectedProject] = useState(null);\n\n  useEffect(() => {\n    const called = axios\n      .get(\"https://servers.sanboxes.soulharsh007.dev\")\n      .then((res) => {\n        console.log(\"res\", res);\n      });\n  }, []);\n  const handleLogin = (username) => {\n    setLoggedInUser(username);\n  };\n\n  const handleSelectProject = (project) => {\n    setSelectedProject(project);\n  };\n\n  return (\n    <div>\n      {!loggedInUser ? (\n        <Login onLogin={handleLogin} />\n      ) : (\n        <div>\n          <h1>Welcome, {loggedInUser}!</h1>\n          {selectedProject ? (\n            <ProjectDetails project={selectedProject} />\n          ) : (\n            <ProjectList\n              projects={dummyProjects}\n              onSelectProject={handleSelectProject}\n            />\n          )}\n          \n\n          {/* Add service dashboards */}\n          {selectedProject && (\n            <ServerInstancesDashboard serverInstances={dummyServerInstances} />\n          )}\n          {selectedProject && (\n            <FirewallDashboard firewallRules={dummyFirewallRules} />\n          )}\n          {selectedProject && (\n            <ObjectStorageDashboard objectStorage={dummyObjectStorage} />\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}